apiVersion: v1
data:
  pyfile: "import datetime\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger
    = logging.getLogger(__name__)\n\n# Function to calculate the percentage of outgoing
    network traffic\ndef get_percentage_of_outgoing_network_traffic(input: dict) ->
    float:\n    # Get the input values, fallback to 0 if not present\n    bytes_sent
    = input.get('net_io_counters_eth0-bytes_sent', 0)\n    bytes_received = input.get('net_io_counters_eth0-bytes_recv',
    0)\n    \n    # Calculate thhe total\n    bytes_total = bytes_sent + bytes_received\n
    \   \n    # If the total is 0, we return 0 to avoid division by 0\n    if (bytes_total
    == 0):\n        logger.warning(\"[WARNING] Total bytes is 0, avoiding division
    by zero.\")\n        return 0\n\n    # Return the percentage value\n    result
    = (bytes_sent / bytes_total) * 100.0\n    logger.info(f\"[INFO] Percentage of
    outgoing network traffic: {result}\")\n    return result\n\n# Function to calculate
    the percentage of memory caching content\ndef get_percentage_of_memory_caching_content(input:
    dict) -> float:\n    # Get the input values, fallbacking to 0 or 1 if not present\n
    \   memory_cached = input.get('virtual_memory-cached', 0)\n    memory_buffers
    = input.get('virtual_memory-buffers', 0)\n    memory_total = input.get('virtual_memory-total',
    1)\n    \n    # Return the percentage value\n    result = ((memory_cached + memory_buffers)
    / memory_total) * 100.0\n    logger.info(f\"[INFO] Percentage of memory caching
    content: {result}\")\n    return result\n\n# Function to calculate the measurement
    datetime\ndef get_measurement_datetime(input: dict) ->  datetime.datetime:\n    #
    Get the value present on the 'timestamp' key, fallback to an empty string if not
    present\n    timestamp_string = input.get('timestamp', '')\n    \n    # If we
    don't receive a timestamp, just return the current datetime\n    if (not timestamp_string):\n
    \       return datetime.datetime.now()\n    \n    # Remove 'Z' to avoid issues\n
    \   timestamp_string = timestamp_string.replace('Z', '')\n    \n    # If a timestamp
    is present, convert the timestamp to a valid datetime and return    \n    # TODO:
    validate if need to do any extra verification here\n    return datetime.datetime.fromisoformat(timestamp_string)\n\n#
    Function to return the updated CPU history list\ndef get_updated_history_list(context:
    object, key: str, cutoff_datetime: datetime) -> list:\n    # Make sure that there
    is something inside context.env\n    if \"cpu_history\" not in context.env:\n
    \       context.env[\"cpu_history\"] = {}\n    \n    # Get the CPU usage history
    list from env\n    cpu_history = context.env[\"cpu_history\"]\n    \n    # If
    there is nothing in the env, we can just return an empty list\n    if (not cpu_history.get(key)):\n
    \       return []\n    \n    # Instantiate an empty list\n    history_list = []\n
    \   \n    # If there is something in the env, we need to keep only the updated
    values in the list\n    for (measurement_datetime, value) in cpu_history.get(key):\n
    \       if (measurement_datetime >= cutoff_datetime):\n            history_list.append((measurement_datetime,
    value))\n    \n    return history_list\n\n# Function to calculate the CPU average
    usage value\ndef get_average_usage(history_list) -> float:\n    if not history_list:\n
    \       return 0.0\n    \n    sum_usage = 0.09\n    for (_, value) in history_list:\n
    \       sum_usage += value\n    return sum_usage / len(history_list)\n    \n\ndef
    get_moving_average(input: dict, context: object) -> dict[str, float]:\n    # Create
    empty result dict to store the moving average for each CPU\n    result = {}\n
    \   \n    # Get the measurement datetime, will be the timestemp received as input
    converted to a datime or the current datetime\n    measurement_datetime = get_measurement_datetime(input)\n
    \   \n    # Calculate the cutoff datetime, we  will use this above to keep only
    valid measurements in the context.env\n    cutoff_datetime = measurement_datetime
    - datetime.timedelta(seconds=60) \n    \n    # Iterate on keys that starts with
    'cpu_percent-'\n    for key in input.keys():\n        if key.startswith('cpu_percent-'):\n
    \           # Get the CPU usage value received as input or fallback to 0\n            cpu_usage
    = input.get(key, 0.0)\n            \n            # Get the updated CPU usage history
    list (a list of CPU usages with measurements that happened at the last minute)\n
    \           history_list = get_updated_history_list(context, key, cutoff_datetime)\n
    \           \n            # Add the current CPU usage to the lsit\n            history_list.append((measurement_datetime,
    cpu_usage))\n            \n            # Calculate the moving average value itself\n
    \           average_usage = get_average_usage(history_list)\n            \n            #
    Update the list in the env\n            context.env[\"cpu_history\"][key] = history_list\n
    \           \n            # Update the list in the result dict\n            _,
    cpu_number = key.split(\"-\", 1)\n            metric_name = f'avg-util-cpu{cpu_number}-60sec'\n
    \           result[metric_name] = average_usage\n            logger.info(f\"[INFO]
    Computed {metric_name}: {average_usage}\")\n\n    return result\n            \ndef
    handler(input: dict, context: object) -> dict[str, float]:\n    logger.info(f\"[INFO]
    Handler function called with the following input: {input}\")\n    result = {\n
    \       'percent-network-egress': get_percentage_of_outgoing_network_traffic(input),\n
    \       'percent-memory-cache': get_percentage_of_memory_caching_content(input),\n
    \       **get_moving_average(input, context)\n    }\n    logger.info(f\"[INFO]
    Handler function result: {result}\")\n    return result"
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"pyfile":"import datetime\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Function to calculate the percentage of outgoing network traffic\ndef get_percentage_of_outgoing_network_traffic(input: dict) -\u003e float:\n    # Get the input values, fallback to 0 if not present\n    bytes_sent = input.get('net_io_counters_eth0-bytes_sent', 0)\n    bytes_received = input.get('net_io_counters_eth0-bytes_recv', 0)\n    \n    # Calculate thhe total\n    bytes_total = bytes_sent + bytes_received\n    \n    # If the total is 0, we return 0 to avoid division by 0\n    if (bytes_total == 0):\n        logger.warning(\"[WARNING] Total bytes is 0, avoiding division by zero.\")\n        return 0\n\n    # Return the percentage value\n    result = (bytes_sent / bytes_total) * 100.0\n    logger.info(f\"[INFO] Percentage of outgoing network traffic: {result}\")\n    return result\n\n# Function to calculate the percentage of memory caching content\ndef get_percentage_of_memory_caching_content(input: dict) -\u003e float:\n    # Get the input values, fallbacking to 0 or 1 if not present\n    memory_cached = input.get('virtual_memory-cached', 0)\n    memory_buffers = input.get('virtual_memory-buffers', 0)\n    memory_total = input.get('virtual_memory-total', 1)\n    \n    # Return the percentage value\n    result = ((memory_cached + memory_buffers) / memory_total) * 100.0\n    logger.info(f\"[INFO] Percentage of memory caching content: {result}\")\n    return result\n\n# Function to calculate the measurement datetime\ndef get_measurement_datetime(input: dict) -\u003e  datetime.datetime:\n    # Get the value present on the 'timestamp' key, fallback to an empty string if not present\n    timestamp_string = input.get('timestamp', '')\n    \n    # If we don't receive a timestamp, just return the current datetime\n    if (not timestamp_string):\n        return datetime.datetime.now()\n    \n    # Remove 'Z' to avoid issues\n    timestamp_string = timestamp_string.replace('Z', '')\n    \n    # If a timestamp is present, convert the timestamp to a valid datetime and return    \n    # TODO: validate if need to do any extra verification here\n    return datetime.datetime.fromisoformat(timestamp_string)\n\n# Function to return the updated CPU history list\ndef get_updated_history_list(context: object, key: str, cutoff_datetime: datetime) -\u003e list:\n    # Make sure that there is something inside context.env\n    if \"cpu_history\" not in context.env:\n        context.env[\"cpu_history\"] = {}\n    \n    # Get the CPU usage history list from env\n    cpu_history = context.env[\"cpu_history\"]\n    \n    # If there is nothing in the env, we can just return an empty list\n    if (not cpu_history.get(key)):\n        return []\n    \n    # Instantiate an empty list\n    history_list = []\n    \n    # If there is something in the env, we need to keep only the updated values in the list\n    for (measurement_datetime, value) in cpu_history.get(key):\n        if (measurement_datetime \u003e= cutoff_datetime):\n            history_list.append((measurement_datetime, value))\n    \n    return history_list\n\n# Function to calculate the CPU average usage value\ndef get_average_usage(history_list) -\u003e float:\n    if not history_list:\n        return 0.0\n    \n    sum_usage = 0.09\n    for (_, value) in history_list:\n        sum_usage += value\n    return sum_usage / len(history_list)\n    \n\ndef get_moving_average(input: dict, context: object) -\u003e dict[str, float]:\n    # Create empty result dict to store the moving average for each CPU\n    result = {}\n    \n    # Get the measurement datetime, will be the timestemp received as input converted to a datime or the current datetime\n    measurement_datetime = get_measurement_datetime(input)\n    \n    # Calculate the cutoff datetime, we  will use this above to keep only valid measurements in the context.env\n    cutoff_datetime = measurement_datetime - datetime.timedelta(seconds=60) \n    \n    # Iterate on keys that starts with 'cpu_percent-'\n    for key in input.keys():\n        if key.startswith('cpu_percent-'):\n            # Get the CPU usage value received as input or fallback to 0\n            cpu_usage = input.get(key, 0.0)\n            \n            # Get the updated CPU usage history list (a list of CPU usages with measurements that happened at the last minute)\n            history_list = get_updated_history_list(context, key, cutoff_datetime)\n            \n            # Add the current CPU usage to the lsit\n            history_list.append((measurement_datetime, cpu_usage))\n            \n            # Calculate the moving average value itself\n            average_usage = get_average_usage(history_list)\n            \n            # Update the list in the env\n            context.env[\"cpu_history\"][key] = history_list\n            \n            # Update the list in the result dict\n            _, cpu_number = key.split(\"-\", 1)\n            metric_name = f'avg-util-cpu{cpu_number}-60sec'\n            result[metric_name] = average_usage\n            logger.info(f\"[INFO] Computed {metric_name}: {average_usage}\")\n\n    return result\n            \ndef handler(input: dict, context: object) -\u003e dict[str, float]:\n    logger.info(f\"[INFO] Handler function called with the following input: {input}\")\n    result = {\n        'percent-network-egress': get_percentage_of_outgoing_network_traffic(input),\n        'percent-memory-cache': get_percentage_of_memory_caching_content(input),\n        **get_moving_average(input, context)\n    }\n    logger.info(f\"[INFO] Handler function result: {result}\")\n    return result"},"kind":"ConfigMap","metadata":{"annotations":{},"creationTimestamp":null,"name":"pyfile","namespace":"jeanevangelista"}}
  creationTimestamp: "2025-01-24T01:06:54Z"
  name: pyfile
  namespace: jeanevangelista
  resourceVersion: "3744436"
  uid: 64d89e9f-e2c7-48ca-9198-11b992c151da